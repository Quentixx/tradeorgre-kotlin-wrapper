package fr.quentixx.tradeogre.wrapper.enums

/**
 * Represents the list of supported markets that you can use to trade it.
 */
enum class MarketType {
    AAVE_USDT,
    ACM_BTC,
    ADA_BTC,
    AEON_BTC,
    ALPH_BTC,
    ALPH_USDT,
    APE_USDT,
    ARQ_BTC,
    ARRR_BTC,
    ARRR_USDT,
    AVN_BTC,
    AVN_LTC,
    AVN_USDT,
    BBS_BTC,
    BBS_LTC,
    BCH_BTC,
    BCN_BTC,
    BCN_LTC,
    BEAM_BTC,
    BITC_BTC,
    BKC_BTC,
    BKC_LTC,
    BLKC_BTC,
    BLOC_BTC,
    BSV_BTC,
    BTC_USDT,
    BTCP_BTC,
    BTCZ_LTC,
    BTRM_LTC,
    CASH_BTC,
    CASH_LTC,
    CATE_USDT,
    CCX_BTC,
    CCX_USDT,
    CIV_BTC,
    CLOAK_BTC,
    COAL_BTC,
    COMP_USDT,
    CRV_USDT,
    CUT_BTC,
    D_BTC,
    DAI_USDT,
    DASH_BTC,
    DERO_BTC,
    DERO_USDT,
    DNX_BTC,
    DNX_USDT,
    DOGE_BTC,
    ERG_BTC,
    ERG_USDT,
    ETH_BTC,
    ETH_USDT,
    ETN_BTC,
    ETNX_BTC,
    ETNX_LTC,
    ETNXP_BTC,
    ETNXP_LTC,
    FBF_BTC,
    FIRO_BTC,
    FLUX_BTC,
    FLUX_USDT,
    GHOST_BTC,
    GLINK_BTC,
    GPKR_BTC,
    GPN_USDT,
    GRFT_BTC,
    GRIMM_BTC,
    GRIMM_LTC,
    GRIN_BTC,
    GRIN_USDT,
    GRLC_BTC,
    HEX_BTC,
    HNS_BTC,
    HUSH_BTC,
    INC_BTC,
    INC_LTC,
    INTU_BTC,
    INTU_LTC,
    IRD_BTC,
    IRON_BTC,
    KAS_BTC,
    KAS_USDT,
    KCN_BTC,
    KDA_BTC,
    KIIRO_BTC,
    KIIRO_USDT,
    KRB_BTC,
    LINK_USDT,
    LNS_BTC,
    LTC_BTC,
    LTC_USDT,
    LTHN_BTC,
    LTHN_LTC,
    LUX_BTC,
    MAT_BTC,
    MAT_LTC,
    MEWC_LTC,
    MEWC_USDT,
    MKR_USDT,
    MSR_BTC,
    MWC_BTC,
    NAH_BTC,
    NBR_BTC,
    NCP_LTC,
    NEOX_BTC,
    NEOX_LTC,
    NEOX_USDT,
    NEXA_USDT,
    NOVO_USDT,
    NXS_BTC,
    OBTC_BTC,
    OMB_BTC,
    OMB_LTC,
    ONION_BTC,
    OXEN_BTC,
    PCN_BTC,
    PCN_LTC,
    PDN_BTC,
    PDN_USDT,
    PIVX_BTC,
    PIVX_USDT,
    PLURA_BTC,
    PLURA_LTC,
    POT_BTC,
    PRCY_BTC,
    PRCY_USDT,
    PURK_BTC,
    QTUM_BTC,
    QUAN_BTC,
    QUAN_LTC,
    RTM_BTC,
    RTM_LTC,
    RTM_USDT,
    RTO_BTC,
    RVN_BTC,
    RXD_BTC,
    RXD_USDT,
    RYO_BTC,
    SATOX_USDT,
    SCP_BTC,
    SHB_BTC,
    SHIB_USDT,
    SIN_BTC,
    SIN_USDT,
    SLD_BTC,
    SOLACE_BTC,
    SOLACE_LTC,
    SUMO_BTC,
    SYFR_BTC,
    SYFR_LTC,
    TRTL_BTC,
    TRTL_LTC,
    TRX_BTC,
    TUBE_BTC,
    UFO_BTC,
    UNI_BTC,
    UPX_LTC,
    USDC_USDT,
    VEIL_BTC,
    VERI_USDT,
    VRSC_BTC,
    WAE_BTC,
    WAE_LTC,
    WOW_BTC,
    WTIP_BTC,
    WTIP_LTC,
    XAO_BTC,
    XEQ_BTC,
    XEQ_USDT,
    XGM_BTC,
    XGS_BTC,
    XHV_BTC,
    XHV_USDT,
    XLA_BTC,
    XLA_LTC,
    XLA_USDT,
    XMC_BTC,
    XMR_BTC,
    XMR_USDT,
    XMV_BTC,
    XNA_BTC,
    XNA_USDT,
    XNO_BTC,
    XNV_BTC,
    XPP_BTC,
    XRN_BTC,
    XRP_BTC,
    XRP_USDT,
    XTNC_BTC,
    XUN_BTC,
    XUN_LTC,
    XUSD_BTC,
    XUSD_USDT,
    XVG_BTC,
    XWP_BTC,
    ZANO_BTC,
    ZANO_USDT,
    ZEPH_BTC,
    ;

    companion object {
        /**
         * Find a supported market to trade with TradeOgre.
         *
         * @param value The value (like "xmr-btc") you want to get as supported market.
         * @return A [MarketType] if the provided value is supported, null otherwise.
         */
        fun fromString(value: String): MarketType? {
            for (market in entries) {
                if (
                    market.name.equals(value, true)
                    || market.value().equals(value, true)
                ) {
                    return market
                }
            }
            return null
        }
    }

    /**
     * Get the conventional format for a market: "XMR_BTC" -> "XMR-BTC"
     */
    fun value(): String = name.replace('_', '-')
}
